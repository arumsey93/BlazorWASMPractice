@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<MudGrid>
    <MudItem xs="12">
        <MudTextField @bind-Value="userInput" Label="User" HelperText="Input Username" Variant="Variant.Text" />
    </MudItem>
    <MudItem xs="12">
        <MudTextField @bind-Value="messageInput" Label="Message" HelperText="Input Message" Variant="Variant.Text" />
    </MudItem>
    <MudItem xs="3">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Send" Disabled="@(!IsConnected)">Send</MudButton>
    </MudItem>
</MudGrid>

<br>
<hr>

<MudGrid>
    <MudItem xs="12">
        <MudList Clickable="false" id="messagesList">
            @foreach (var message in messages)
            {
                <MudListItem>@message</MudListItem>
            }
        </MudList>
    </MudItem>
</MudGrid>

@code { private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
          .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task Send() =>
      await hubConnection.SendAsync("SendMessage", userInput, messageInput);

    public bool IsConnected =>
      hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    } }
